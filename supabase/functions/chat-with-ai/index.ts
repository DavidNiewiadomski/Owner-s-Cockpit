
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log('=== EDGE FUNCTION STARTED ===');
    console.log('Request method:', req.method);
    console.log('Request headers:', Object.fromEntries(req.headers.entries()));
    
    if (req.method !== 'POST') {
      throw new Error('Only POST method allowed');
    }

    const requestBody = await req.json();
    console.log('Request body received:', JSON.stringify(requestBody, null, 2));
    
    const { message, conversationHistory } = requestBody;
    
    if (!message || typeof message !== 'string') {
      throw new Error('Message is required and must be a string');
    }

    console.log('Processing message:', message);
    console.log('Conversation history items:', conversationHistory?.length || 0);

    // Use the hardcoded Gemini API key
    const GEMINI_API_KEY = 'AIzaSyDLBm0-7qT4P2IESMvw7Tv6FK20TmnpeFE';
    
    if (!GEMINI_API_KEY) {
      throw new Error('Gemini API key not available');
    }

    console.log('Gemini API key available, length:', GEMINI_API_KEY.length);

    // Create the prompt for Gemini
    const systemPrompt = `You are a helpful construction project assistant. You help with project management, resource allocation, timeline planning, risk assessment, and other construction-related tasks. Provide specific, actionable advice. Keep responses concise and professional.`;
    
    const fullPrompt = `${systemPrompt}\n\nUser question: ${message}\n\nPlease provide a helpful response:`;
    
    console.log('Calling Gemini API with prompt length:', fullPrompt.length);

    // Call Gemini API
    const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`;
    
    const requestPayload = {
      contents: [{
        parts: [{
          text: fullPrompt
        }]
      }],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
      }
    };

    console.log('Sending request to Gemini:', JSON.stringify(requestPayload, null, 2));

    const geminiResponse = await fetch(geminiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestPayload)
    });

    console.log('Gemini response status:', geminiResponse.status);
    console.log('Gemini response headers:', Object.fromEntries(geminiResponse.headers.entries()));

    if (!geminiResponse.ok) {
      const errorText = await geminiResponse.text();
      console.error('Gemini API error response:', errorText);
      throw new Error(`Gemini API error: ${geminiResponse.status} - ${errorText}`);
    }

    const responseText = await geminiResponse.text();
    console.log('Raw Gemini response:', responseText);

    const data = JSON.parse(responseText);
    console.log('Parsed Gemini response:', JSON.stringify(data, null, 2));
    
    const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!aiResponse) {
      console.error('No response text found in Gemini response structure');
      throw new Error('No response generated by Gemini');
    }

    console.log('Extracted AI response:', aiResponse);
    console.log('=== EDGE FUNCTION COMPLETED SUCCESSFULLY ===');

    return new Response(
      JSON.stringify({ 
        response: aiResponse,
        debug: {
          messageLength: message.length,
          responseLength: aiResponse.length,
          timestamp: new Date().toISOString()
        }
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    );

  } catch (error) {
    console.error('=== EDGE FUNCTION ERROR ===');
    console.error('Error type:', error.constructor.name);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Unknown error occurred',
        errorType: error.constructor.name,
        timestamp: new Date().toISOString(),
        details: 'Check the edge function logs for more information'
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    );
  }
});
